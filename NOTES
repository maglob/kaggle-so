Ideas for features
- number of tags
- title word frequencies
- body word frequencies
- some combination matrix of previous features
- calculate feature weight?

Ideas
- Zero counts: Laplace correction: P(Aj =vjk|Ci) = (nijk+f)/(ni+fnj), (f=1/n)
- Confusion matrix
-  viivan alla: P(C) vs âˆ‘j P(Y = yj)P(X1 ...Xn|Y = yj)
- cross validation
- overfitting
- unbalanced classes, skewed class sizes, skewed data   
- "Skewed data refers to having more training examples for one class than another which causes the decision boundary weights to be biased."
- complement naive bayes

=== Class frequencies
$ ./get-status.sh  < ~/data/train.csv  | sort | uniq -c | sort -nr
3300392 ,open
30789 ,not a real question
17530 ,off topic
15659 ,not constructive
6158 ,too localized

=== Class frequencies on forum
open questions: 3300392
closed questions: 70136

=== Stats for processing train-sample.csv
CL-USER> (time (process-file  #P"/Users/mka/Dropbox/prg/kaggle/stack-overflow/data/train-sample.csv"))
Evaluation took:
  24.881 seconds of real time
  23.791952 seconds of total run time (22.976480 user, 0.815472 system)
  [ Run times consist of 0.705 seconds GC time, and 23.087 seconds non-GC time. ]
  95.62% CPU
  39,811,633,059 processor cycles
  5,192 page faults
  4,295,677,904 bytes consed  
#(70136 30789 15659 17530 6158)
* (reduce #'+ *)
140272

=== Stats for processing train.csv
CL-USER> (time (process-file  #P"/Users/mka/data/train.csv"))
Evaluation took:
  748.241 seconds of real time
  705.744075 seconds of total run time (659.903192 user, 45.840883 system)
  [ Run times consist of 27.081 seconds GC time, and 678.664 seconds non-GC time. ]
  94.32% CPU
  1,197,224,446,477 processor cycles
  36,760 page faults
  115,456,001,056 bytes consed
  
#(3300392 30789 15659 17530 6158)
CL-USER> (reduce #'+ *)
3370528


Notes
- result-5.csv no clamp in IMPACT-2, bold
- result-6.csv clamp moved into predict, with epsilon of 0.001


CL-USER> (stat-close-percentage-per-hour)  ; train-slim.csv
 0 0.021865688 ooooooooooooooooooooooooooooooooooooooooooooooooooo
 1 0.024570996 ooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
 2 0.025652595 oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
 3 0.025157928 oooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
 4 0.024899246 oooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
 5  0.02323213 oooooooooooooooooooooooooooooooooooooooooooooooooooooo
 6 0.022126386 ooooooooooooooooooooooooooooooooooooooooooooooooooo
 7  0.02277558 ooooooooooooooooooooooooooooooooooooooooooooooooooooo
 8 0.022927117 ooooooooooooooooooooooooooooooooooooooooooooooooooooo
 9 0.022805572 ooooooooooooooooooooooooooooooooooooooooooooooooooooo
10 0.021614775 oooooooooooooooooooooooooooooooooooooooooooooooooo
11 0.020788832 oooooooooooooooooooooooooooooooooooooooooooooooo
12 0.019630546 ooooooooooooooooooooooooooooooooooooooooooooo
13 0.019404035 ooooooooooooooooooooooooooooooooooooooooooooo
14 0.020162646 ooooooooooooooooooooooooooooooooooooooooooooooo
15 0.020458937 ooooooooooooooooooooooooooooooooooooooooooooooo
16 0.019707007 oooooooooooooooooooooooooooooooooooooooooooooo
17 0.019956086 oooooooooooooooooooooooooooooooooooooooooooooo
18 0.018712403 ooooooooooooooooooooooooooooooooooooooooooo
19 0.019034067 oooooooooooooooooooooooooooooooooooooooooooo
20 0.018765852 ooooooooooooooooooooooooooooooooooooooooooo
21  0.01851005 ooooooooooooooooooooooooooooooooooooooooooo
22 0.020274196 ooooooooooooooooooooooooooooooooooooooooooooooo
23  0.02127085 ooooooooooooooooooooooooooooooooooooooooooooooooo

(stat-close-percentage-per-reputation-bracket) ; train-slim-80.csv  #(0 1 2 3 4 5 6 7 8 9 10 100 1000 10000 100000)
15 0.0070921984 ooooo
14  0.008219283 oooooo
13  0.012264087 oooooooooo
12  0.015363209 oooooooooooo
11  0.019622987 oooooooooooooooo
10  0.037142005 oooooooooooooooooooooooooooooo
 9  0.022349643 oooooooooooooooooo
 8  0.030405406 ooooooooooooooooooooooooo
 7  0.030763071 ooooooooooooooooooooooooo
 6  0.026116839 ooooooooooooooooooooo
 5   0.05276382 ooooooooooooooooooooooooooooooooooooooooooo
 4  0.022248447 oooooooooooooooooo
 3  0.064327486 ooooooooooooooooooooooooooooooooooooooooooooooooooooo
 2  0.033314466 ooooooooooooooooooooooooooo
 1   0.06077348 oooooooooooooooooooooooooooooooooooooooooooooooooo
 0  0.072088726 oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo

(let* ((brackets #(0 1 2 3 4 5 6 7 8 9 10 100 1000 10000 100000))  
                (res (make-array (list (1+ (length brackets)) +status-count+)))) 
           (db-map +data+ (lambda (rank status) (incf (aref res (bracket-id rank brackets) status))) 4 14) res)

;; Word frequences
(db-map +data+ (lambda (x) (dolist (e (tokenize x)) (hash-table-incf ht e))) +col-title+)
(head (sort (hash-table-list ht) (lambda (a b) (> (cdr a) (cdr b)))) 100)

ti 25.9.2012, train-95p train, train-5p predict
- empty run, prio frequences: 0.12752349317283077d0
- all 5 features (answer count, reputation, user age, tags, title): 0.2595582755861375d0
- only tags: 0.12053042809326656d0
- answer, tags: 0.11895258311175949d0
- only title (limit 20): 0.13472338085265803d0
- only title (limist 1000): 0.13472338085265803d0
- only title (limist 1000, remove-duplicate on predict): 0.13320366303836986d0
- only title (top-word): 0.12460666223126096d0
- tags, title (top-word): 0.1255847509248373d0
- only answer count: 0.12541011429726776d0

